{"version":3,"sources":["components/Drumpad.js","components/DrumMachine.js","components/App.js","serviceWorker.js","index.js"],"names":["Drumpad","props","componentDidMount","document","addEventListener","handleKeyDown","componentWillUnmount","removeEventListener","event","keyCode","state","keyObject","drumpad","getElementById","id","console","log","dispatchEvent","MouseEvent","bubbles","cancelable","view","window","playSound","keyTrigger","handleDrumpadClick","soundElement","currentTime","play","pushCurrentTrack","soundObject","bind","className","this","onClick","src","url","React","Component","DrumMachine","showCurrentTrack","currentTrack","setState","currentSound","soundList","drumSoundData","drumpPadElements","map","index","key","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f4dbb61e.chunk.js","sourcesContent":["import React from 'react';\nimport './Drumpad.scss';\n\nclass Drumpad extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            keyObject : this.props.soundObject\n        };\n        // Register the methods to this\n        this.playSound = this.playSound.bind(this);\n        this.handleDrumpadClick = this.handleDrumpadClick.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n    }\n\n    componentDidMount = () => {\n        document.addEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentWillUnmount = () => {\n        document.removeEventListener('keydown', this.handleKeyDown);\n    }\n\n    handleKeyDown = (event) => {\n        if(event.keyCode === this.state.keyObject.keyCode) {\n            const drumpad = document.getElementById(this.state.keyObject.id);\n            console.log(drumpad);\n            drumpad.dispatchEvent(new MouseEvent('mousedown', {\n                bubbles: true,\n                cancelable: true,\n                view: window\n              }));\n            this.playSound(this.state.keyObject.keyTrigger);\n        } \n    }\n\n    handleDrumpadClick = (event) => {\n        this.playSound(this.state.keyObject.keyTrigger);\n    }\n\n    playSound = (keyTrigger) => {\n        const soundElement = document.getElementById(keyTrigger);\n        // set the current time and play the sound element\n        soundElement.currentTime = 0;\n        soundElement.play();\n        // display the current track being played\n        this.props.pushCurrentTrack(this.state.keyObject.id);\n    }\n\n    render() {\n        return (\n            <div className=\"drum-pad\" id={this.state.keyObject.id} onClick={this.handleDrumpadClick}>\n                <audio id={this.state.keyObject.keyTrigger} className=\"clip\" src={this.state.keyObject.url}></audio>\n                {this.state.keyObject.keyTrigger}\n            </div>\n        )\n    }\n}\n\nexport default Drumpad;","import React from 'react';\nimport Drumpad from './Drumpad';\nimport './DrumMachine.scss';\n\nclass DrumMachine extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            soundList: this.props.drumSoundData,\n            currentSound: 'none'\n        };\n        //bind the custom actions\n        this.showCurrentTrack = this.showCurrentTrack.bind(this);\n    }\n\n    showCurrentTrack = (currentTrack) => {\n        this.setState({\n            currentSound: currentTrack\n        });\n    }\n\n    render() {\n        // Formulate the drumpad elements\n        const drumpPadElements = this.state.soundList.map((keyObject, index) => {\n            return <Drumpad key={index} soundObject={keyObject} pushCurrentTrack={this.showCurrentTrack} />\n        })\n        return (\n            <div id=\"drum-machine\" className=\"drum-machine\">\n                <div id=\"display\" className=\"display\">\n                    <span className=\"now-playing\">Now playing</span>\n                    <span className=\"current-sound\">{this.state.currentSound}</span>\n                </div>\n                <div className=\"drum-pad-group\">\n                    {drumpPadElements}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DrumMachine;","import React from 'react';\nimport './App.scss';\nimport DrumMachine from './DrumMachine';\n\nconst drumSoundData = [{\n    keyCode: 81,\n    keyTrigger: 'Q',\n    id: 'Heater-1',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n  }, {\n    keyCode: 87,\n    keyTrigger: 'W',\n    id: 'Heater-2',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n  }, {\n    keyCode: 69,\n    keyTrigger: 'E',\n    id: 'Heater-3',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n  }, {\n    keyCode: 65,\n    keyTrigger: 'A',\n    id: 'Heater-4',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n  }, {\n    keyCode: 83,\n    keyTrigger: 'S',\n    id: 'Clap',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n  }, {\n    keyCode: 68,\n    keyTrigger: 'D',\n    id: 'Open-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n  }, {\n    keyCode: 90,\n    keyTrigger: 'Z',\n    id: \"Kick-n'-Hat\",\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n  }, {\n    keyCode: 88,\n    keyTrigger: 'X',\n    id: 'Kick',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n  }, {\n    keyCode: 67,\n    keyTrigger: 'C',\n    id: 'Closed-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n  },\n];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div className=\"app-header\">DRUM MACHINE</div>\n        <DrumMachine drumSoundData={drumSoundData}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}